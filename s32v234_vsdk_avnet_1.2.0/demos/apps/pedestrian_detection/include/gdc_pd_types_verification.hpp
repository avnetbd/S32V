/*****************************************************************************
* 
* NXP Confidential Proprietary
*
* Copyright (c) 2015-2016 Freescale Semiconductor
* Copyright 2017 NXP 
* All Rights Reserved
*
******************************************************************************
*
* THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
* IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
* OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
* IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
* INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
* (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
* STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
* IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
* THE POSSIBILITY OF SUCH DAMAGE.
*
****************************************************************************/

/*!*********************************************************************************
*  @file
*
***********************************************************************************/

#ifndef GDCPEDESTRIANDETECTIONTYPESVERIFICATION_HPP
#define GDCPEDESTRIANDETECTIONTYPESVERIFICATION_HPP


/***************************************************************************/
/* Include files. */
#include "gdc_pd_types.hpp"



/*!*********************************************************************************
*  @brief Class used to write or read output sequence to/from files.
 */
class GdcPd_OutputFile
{
public:
   GdcPd_OutputFile();
   ~GdcPd_OutputFile();

   LIB_RESULT Open(const char* const cpcFilenameWrite,
                   const char* const cpcFilenameRead);

   LIB_RESULT Close();

protected:
   FILE* mpFileWrite;
   FILE* mpFileRead;
};




/*!*********************************************************************************
*  @brief structure storing output values generated by the algorithm for one image.
 *  \details The output structure is used for regression testing.
 *  It is used to store the output for a video sequence and/or compare
 *  a reference output to the current output if modification were made to the algorithm.
 */
struct GdcPd_Output_Hog
{
   uint32_t               mSceneCounter;
   void*                  mhHogScoresOal[gcNumberOfSceneResizes];
   icp::DataDescriptor    mHogScoresDd[gcNumberOfSceneResizes];
   bool                   mWeFreeBuffers;

public:
   GdcPd_Output_Hog();
   ~GdcPd_Output_Hog();
};



bool operator==(const GdcPd_Output_Hog& rcLeft, const GdcPd_Output_Hog& rcRight);



/*!*********************************************************************************
*  @brief Class used to write or read output sequence to/from files.
 */
class GdcPd_OutputFile_Hog : public GdcPd_OutputFile
{
public:
   LIB_RESULT Write(GdcPd_Output_Hog& rOutput);

   LIB_RESULT Read(GdcPd_Output_Hog& rOutput);
};



/*!*********************************************************************************
*  @brief structure storing output values generated by the algorithm for one image.
 *  \details The output structure is used for regression testing.
 *  It is used to store the output for a video sequence and/or compare
 *  a reference output to the current output if modification were made to the algorithm.
 */
struct GdcPd_Output_PedestrianDetection
{
   uint32_t            mImageNumber;
   std::vector<ROI>    mPedestrianRois;
   void*               mhSceneResizesOal[11]; // SASHBY: Magic number bad!!!
   icp::DataDescriptor mSceneResizeDd[11];    // SASHBY: Magic number bad!!!
   bool                mWeFreeBuffers;

public:
   GdcPd_Output_PedestrianDetection();
   ~GdcPd_Output_PedestrianDetection();
};


bool operator==(const GdcPd_Output_PedestrianDetection& rcLeft, const GdcPd_Output_PedestrianDetection& rcRight);



/*!*********************************************************************************
*  @brief Class used to write or read output sequence to/from files.
 */
class GdcPd_OutputFile_PedestrianDetection : public GdcPd_OutputFile
{
public:
   LIB_RESULT Write(GdcPd_Output_PedestrianDetection& rOutput);

   LIB_RESULT Read(GdcPd_Output_PedestrianDetection& rOutput);
};



/*!*********************************************************************************
*  @brief Class used to gather utility function needed by the application or its tasks.
 */
namespace GdcPd_Helper
{
   void PrintMismatch_Hog(FILE* const cpFile,
                          const GdcPd_Output_Hog& rcLocalOutput,
                          const GdcPd_Output_Hog& rcReferenceOutput);

   void PrintMismatch_PedestrianDetection(FILE* const cpFile,
                                          const GdcPd_Output_PedestrianDetection& rcLocalOutput,
                                          const GdcPd_Output_PedestrianDetection& rcReferenceOutput);

   void DumpDetectionImages(const uint32_t cSceneId,
                            const uint32_t cScaleId,
                            const uint32_t cScoreX,
                            const uint32_t cScoreY,
                            const icp::DataDescriptor& rcDd,
                            const ROI& rcRoi);
}


#endif /* GDCPEDESTRIANDETECTIONTYPESVERIFICATION_HPP */
